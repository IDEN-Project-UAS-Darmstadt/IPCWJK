[{"path":"https://iden-project-uas-darmstadt.github.io/IPCWJK/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 IPCWJK authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://iden-project-uas-darmstadt.github.io/IPCWJK/articles/ipcw_models.html","id":"model-based-standard-errors","dir":"Articles","previous_headings":"","what":"Model Based Standard Errors","title":"IPCW Models for Survival Analysis","text":"models use standard errors calculated fitting process.","code":""},{"path":"https://iden-project-uas-darmstadt.github.io/IPCWJK/articles/ipcw_models.html","id":"parametric-model","dir":"Articles","previous_headings":"Model Based Standard Errors","what":"Parametric Model","title":"IPCW Models for Survival Analysis","text":"parametric survival model, can match data generating mechanism. Based model can predict survival probability \\(\\tau\\) get standard error prediction using delta method deltamethod_from_model() function.","code":"all_results <- list()  library(survival) parmmodel <- survreg(Surv(t, delta) ~ x1 + x2, data = df, dist = \"loglogistic\")  parmmodel #> Call: #> survreg(formula = Surv(t, delta) ~ x1 + x2, data = df, dist = \"loglogistic\") #>  #> Coefficients: #> (Intercept)          x1          x2  #>   0.9442538  -0.5457500   0.4917848  #>  #> Scale= 0.9492391  #>  #> Loglik(model)= -840.9   Loglik(intercept only)= -869.1 #>  Chisq= 56.45 on 2 degrees of freedom, p= 5.51e-13  #> n= 500 pred_fun <- deltamethod_from_model(parmmodel, tau) preds <- pred_fun(test_data) brier_score <- brier(pred_fun(df)$prediction)  all_results[[\"Parametric\"]] <- list(preds = preds, brier = brier_score)  knitr::kable(preds)"},{"path":"https://iden-project-uas-darmstadt.github.io/IPCWJK/articles/ipcw_models.html","id":"logistic-regression-with-logitipcw","dir":"Articles","previous_headings":"Model Based Standard Errors","what":"Logistic Regression with logitIPCW","title":"IPCW Models for Survival Analysis","text":"mets::logitIPCW() can use adjusted variance estimation (Blanche, Holt, Scheike 2023; Holst, Scheike, Hjelmborg 2016; Scheike, Holst, B.Hjelmborg 2014). deltamethod_from_model() allows us use naive corrected estimation. predictions corrections … … use naive approach","code":"library(mets) logitipcw_m <- logitIPCW(Event(t, delta) ~ x1 + x2, time = tau, data = df) logitipcw_m #>  #>    n events #>  500    259 #>  #>  500 clusters #> coeffients: #>             Estimate  Std.Err     2.5%    97.5% P-value #> (Intercept)  0.95554  0.18334  0.59620  1.31487   0e+00 #> x1           0.70741  0.12264  0.46703  0.94779   0e+00 #> x2          -0.84585  0.23915 -1.31458 -0.37711   4e-04 #>  #> exp(coeffients): #>             Estimate    2.5%  97.5% #> (Intercept)  2.60007 1.81522 3.7243 #> x1           2.02874 1.59525 2.5800 #> x2           0.42919 0.26859 0.6858 pred_fun <- deltamethod_from_model(logitipcw_m, tau) preds <- pred_fun(test_data) brier_score <- brier(pred_fun(df)$prediction)  all_results[[\"LR (corrected)\"]] <- list(preds = preds, brier = brier_score)  knitr::kable(preds) pred_fun <- deltamethod_from_model(logitipcw_m, tau, naive = TRUE) preds <- pred_fun(test_data) brier_score <- brier(pred_fun(df)$prediction)  all_results[[\"LR (naive)\"]] <- list(preds = preds, brier = brier_score)  knitr::kable(preds)"},{"path":"https://iden-project-uas-darmstadt.github.io/IPCWJK/articles/ipcw_models.html","id":"ipcw-jackknife-based-standard-errors","dir":"Articles","previous_headings":"","what":"IPCW Jackknife Based Standard Errors","title":"IPCW Models for Survival Analysis","text":"models use standard errors calculated jackknife approach. include weighted approach (\"wJK\") naive approach (\"nJK\"). See ?IPCWJK details.","code":""},{"path":"https://iden-project-uas-darmstadt.github.io/IPCWJK/articles/ipcw_models.html","id":"logistic-regression-with-jackknife","dir":"Articles","previous_headings":"IPCW Jackknife Based Standard Errors","what":"Logistic Regression with Jackknife","title":"IPCW Models for Survival Analysis","text":"use ipcw_logistic_regression() function. use weighted jackknife … … unweighted jackknife.","code":"logreg <- ipcw_logistic_regression(df, tau,   time_var = \"t\",   status_var = \"delta\" )  logreg #> IPCW Model #> ----------- #> Model name:  IPCW Logistic Regression  #> Tau (time horizon):  5  #> Time variable:  t  #> Status variable:  delta  #> Training variables:  x1, x2  #> Number of training samples:  500  #> Number of unusable training samples:  116  #> Number of (effective) training samples:  500  #> Train Brier score:  0.207 preds <- predict(logreg, test_data) brier_score <- brier(predict(logreg, df)$prediction)  all_results[[\"LR (nJK)\"]] <- list(preds = preds, brier = brier_score)  knitr::kable(preds) preds <- predict(logreg, test_data, naive = TRUE) brier_score <- brier(predict(logreg, df, naive = TRUE)$prediction)  all_results[[\"LR (wJK)\"]] <- list(preds = preds, brier = brier_score)  knitr::kable(preds)"},{"path":"https://iden-project-uas-darmstadt.github.io/IPCWJK/articles/ipcw_models.html","id":"xgboost-binary-classifier-with-jackknife","dir":"Articles","previous_headings":"IPCW Jackknife Based Standard Errors","what":"XGBoost Binary Classifier with Jackknife","title":"IPCW Models for Survival Analysis","text":"use ipcw_xgboost() function. machine learning model, based boosted learning process, parametric calculation standard error possible. use weighted jackknife … … unweighted jackknife.","code":"xgb <- ipcw_xgboost(df, tau,   time_var = \"t\",   status_var = \"delta\" )  xgb #> IPCW Model #> ----------- #> Model name:  IPCW XGBoost  #> Tau (time horizon):  5  #> Time variable:  t  #> Status variable:  delta  #> Training variables:  x1, x2  #> Number of training samples:  500  #> Number of unusable training samples:  116  #> Number of (effective) training samples:  500  #> Train Brier score:  0.207  #> Additional information: #>   - params_passed : $objective #>     [1] \"binary:logistic\" #>      #>     $booster #>     [1] \"gblinear\" #>      #>     $eta #>     [1] 0.1 #> preds <- predict(xgb, test_data) brier_score <- brier(predict(xgb, df)$prediction)  all_results[[\"XGBoost (wJK)\"]] <- list(preds = preds, brier = brier_score)  knitr::kable(preds) preds <- predict(xgb, test_data, naive = TRUE) brier_score <- brier(predict(xgb, df, naive = TRUE)$prediction)  all_results[[\"XGBoost (nJK)\"]] <- list(preds = preds, brier = brier_score)  knitr::kable(preds)"},{"path":"https://iden-project-uas-darmstadt.github.io/IPCWJK/articles/ipcw_models.html","id":"comparison","dir":"Articles","previous_headings":"","what":"Comparison","title":"IPCW Models for Survival Analysis","text":"compare results models.  expected, variance estimation impact model performance. following plot shows results first test data entry.","code":"cols <- hcl.colors(length(all_results), palette = \"Dynamic\") brier_scores <- sapply(all_results, \"[[\", \"brier\")  barplot(   brier_scores,   col = cols,   names.arg = names(brier_scores),   ylab = \"Brier Score\",   las = 2,   cex.names = 0.75 ) i <- 1 testpreds <- all_results |>   sapply(\\(res) unlist(res$preds[i, ])) |>   t() |>   as.data.frame()  bar_centers <- barplot(testpreds$prediction,   names.arg = rownames(testpreds),   col = cols,   ylim = c(0, max(testpreds$upper) * 1.05),   las = 2,   cex.names = 0.75,   ylab = \"Prediction\" ) arrows(   x0 = bar_centers, y0 = testpreds$lower,   x1 = bar_centers, y1 = testpreds$upper,   angle = 90, code = 3, length = 0.05, lwd = 1.5 ) abline(h = test_data_true_probs[[i]], col = \"red\", lwd = 2, lty = 2) legend(   \"topright\",   legend = paste(\"True Probability =\", round(test_data_true_probs[[i]], 3)),   col = \"red\",   lwd = 2,   lty = 2,   bty = \"n\" ) knitr::kable(testpreds)"},{"path":[]},{"path":"https://iden-project-uas-darmstadt.github.io/IPCWJK/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Antje Jahn-Eimermacher. Author. Lukas Klein. Author, maintainer.","code":""},{"path":"https://iden-project-uas-darmstadt.github.io/IPCWJK/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Jahn-Eimermacher , Klein L (2025). IPCWJK: IPCW Jackknife Methods Standard Errors Survival Prediction. R package version 0.1.0.9000, https://iden-project-uas-darmstadt.github.io/IPCWJK.","code":"@Manual{,   title = {IPCWJK: IPCW Jackknife Methods for Standard Errors in Survival Prediction},   author = {Antje Jahn-Eimermacher and Lukas Klein},   year = {2025},   note = {R package version 0.1.0.9000},   url = {https://iden-project-uas-darmstadt.github.io/IPCWJK}, }"},{"path":"https://iden-project-uas-darmstadt.github.io/IPCWJK/index.html","id":"ipcwjk","dir":"","previous_headings":"","what":"IPCW Jackknife Methods for Standard Errors in Survival Prediction","title":"IPCW Jackknife Methods for Standard Errors in Survival Prediction","text":"IPCW Jackknife Methods Standard Errors Survival Prediction Provides functions fitting binary classification models inverse probability censoring weights (IPCW) estimate survival probabilities, implements jackknife resampling methods unbiased prediction error estimation. documentation available https://iden-project-uas-darmstadt.github.io/IPCWJK/","code":""},{"path":"https://iden-project-uas-darmstadt.github.io/IPCWJK/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"IPCW Jackknife Methods for Standard Errors in Survival Prediction","text":"can install development version IPCWJK like : Releases library can found .","code":"# With remotes remotes::install_github(\"IDEN-Project-UAS-Darmstadt/IPCWJK\") # With pak (recommended for speed) pak::pkg_install(\"IDEN-Project-UAS-Darmstadt/IPCWJK\")"},{"path":"https://iden-project-uas-darmstadt.github.io/IPCWJK/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"IPCW Jackknife Methods for Standard Errors in Survival Prediction","text":"IPCW weights can calculated ipcw_weights function.  survreg models log-logistic distribution logitIPCW provide convenient access Wald confidence intervals based delta method logit scale. Models using IPCW also available. , provide jackknife-based estimation standard error Wald confidence intervals based delta method logit scale.","code":"library(survival) tau <- 100 df <- veteran[, c(\"time\", \"status\", \"karno\", \"age\")] newdata <- data.frame(karno = c(80, 70), age = c(40, 50))  # Calculation of IPCW weights at tau library(IPCWJK) w <- ipcw_weights(df, tau, time_var = \"time\", status_var = \"status\") hist(w,   breaks = 30,   xlab = \"IPCW Weight\", col = \"lightblue\", border = \"grey\" ) # Fit a log-logistic survival model survreg_fit <- survreg(Surv(time, status) ~ karno + age,   data = df,   dist = \"loglogistic\" ) # This provides you with an Wald CI on the logit scale: pred_fun <- deltamethod_from_model(survreg_fit, tau = tau) pred_fun(newdata) #>   prediction     lower     upper         se #> 1  0.6087168 0.4506212 0.7668123 0.08066101 #> 2  0.4815100 0.3795966 0.5834235 0.05199666  # Fit a logitIPCW model library(mets) logipcw_fit <- logitIPCW(Event(time, status) ~ karno + age,   time = tau,   data = df ) pred_fun <- deltamethod_from_model(logipcw_fit, tau = tau) pred_fun(newdata) #>   prediction     lower     upper         se #> 1  0.7406860 0.5672413 0.9141306 0.08849216 #> 2  0.5808678 0.4513883 0.7103472 0.06606092 # IPCW Logistic Regression fit <- ipcw_logistic_regression(df,   tau = tau, time_var = \"time\",   status_var = \"status\" ) predict(fit, newdata) #>   prediction     lower     upper         se #> 1  0.7477355 0.5387945 0.8826380 0.08960564 #> 2  0.5819723 0.4455359 0.7069205 0.06821779  # IPCW XGBoost Classifier fit <- ipcw_xgboost(df, tau = tau, time_var = \"time\", status_var = \"status\") predict(fit, newdata) #>   prediction     lower     upper         se #> 1  0.7654250 0.5621175 0.8924056 0.08545969 #> 2  0.5937184 0.4579942 0.7164942 0.06741503"},{"path":"https://iden-project-uas-darmstadt.github.io/IPCWJK/index.html","id":"development","dir":"","previous_headings":"","what":"Development","title":"IPCW Jackknife Methods for Standard Errors in Survival Prediction","text":"Restore development environment : use anything available devtools package develop package.","code":"renv::restore() library(devtools) document() # to update documentation and roxygen functionality load_all() # to load the package functions for development build_readme() # to update the README test() # to run tests check() # to check the package covr::package_coverage() # to check code coverage styler::style_pkg() # to style the code lint() # to check the code for linting issues"},{"path":"https://iden-project-uas-darmstadt.github.io/IPCWJK/reference/IPCWJK-package.html","id":null,"dir":"Reference","previous_headings":"","what":"IPCWJK: IPCW jackknife SE Estimation for right-censored survival data  — IPCWJK-package","title":"IPCWJK: IPCW jackknife SE Estimation for right-censored survival data  — IPCWJK-package","text":"Provides functions fitting binary classification models inverse probability censoring weights (IPCW) estimate survival probabilities, implements jackknife resampling methods unbiased prediction error estimation.","code":""},{"path":"https://iden-project-uas-darmstadt.github.io/IPCWJK/reference/IPCWJK-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"IPCWJK: IPCW jackknife SE Estimation for right-censored survival data  — IPCWJK-package","text":"\\(n\\) individuals observe realizations random variables covariates, time event event indicators \\((X_i,T_i,\\delta_i)\\). assume variables independent identically distributed individuals. time event right-censored. underlying unobserved time event \\(T^*_i\\) time censoring \\(C_i\\) assume independent conditional \\(X_i\\).","code":""},{"path":"https://iden-project-uas-darmstadt.github.io/IPCWJK/reference/IPCWJK-package.html","id":"prediction-target-and-ipcw","dir":"Reference","previous_headings":"","what":"Prediction Target and IPCW","title":"IPCWJK: IPCW jackknife SE Estimation for right-censored survival data  — IPCWJK-package","text":"goal predict survival probability \\(p_i\\) time horizon \\(\\tau\\). probability defined \\[ p_i:=P(T^* \\geq \\tau | X=x_i) = P(Y=1|X=x_i).\\] random variable \\(Y:=\\mathbf{}(T^* > \\tau)\\) represents dichotomized outcome binary classifier use dependent variable predicting \\(p_i\\). random variable unobservable individuals, censored \\(\\tau\\). removal individuals leads worse discrimination calibration model (Reps et al. 2021; Kvamme Borgan 2023) . Inverse probability censoring weights (IPCW) can correct . calculation weights implemented ipcw_weights(). using maximum-likelihood based model IPCW weights can either applied contribution loss model (IPCW-GLM) outcome individual (\\(Y_i\\), OIPCW). setting, equivalent (Blanche et al. 2023) . many model algorithms, distinction depends training weights implemented. package names observations random variables \\((T_i,\\delta_i)\\) given arguments time_var status_var. \\(\\tau\\) specified tau.","code":""},{"path":"https://iden-project-uas-darmstadt.github.io/IPCWJK/reference/IPCWJK-package.html","id":"standard-error-se-using-the-delta-method","dir":"Reference","previous_headings":"","what":"Standard Error (SE) using the Delta method","title":"IPCWJK: IPCW jackknife SE Estimation for right-censored survival data  — IPCWJK-package","text":"many applications uncertainty predictions plays large role. Uncertainty communicated standard errors (SEs) confidence interval prediction. differentiable function used calculate predictions asymptotically normal distributed random variables, delta method can used calculate standard error. provide functionality implemented trained models deltamethod_from_model(). flexible interface available deltamethod_pred_function(). function deltamethod_from_model() example supports implementation IPCW-GLM logistic regression mets::logitIPCW(). fitted model, naive randomness weights adjusted variance estimators can used (Blanche et al. 2023; Holst et al. 2016; Scheike et al. 2014) . correction variance estimator described GLMs, provide model-agnostic estimation using weighted jackknife approach.","code":""},{"path":"https://iden-project-uas-darmstadt.github.io/IPCWJK/reference/IPCWJK-package.html","id":"confidence-intervals-cis-","dir":"Reference","previous_headings":"","what":"Confidence intervals (CIs)","title":"IPCWJK: IPCW jackknife SE Estimation for right-censored survival data  — IPCWJK-package","text":"Wald confidence intervals (CIs) \\(\\hat{p}\\pm z_{1-\\alpha/2}SE(\\hat{p}) \\) commonly used form can lead CIs outside 0,1 range. Better interpretable CIs provided delta method intervals calculated logit scale. assumes asymptotic normality prediction (Perme Manevski 2019) . \\[ \\Big[\\frac{\\exp(LL_{logit})}{1+\\exp(LL_{logit})}; \\frac{\\exp(UL_{logit})}{1+\\exp(UL_{logit})}\\Big] \\] \\[ LL_{logit} / UL_{logit}= \\ln(\\frac{\\hat{p}}{1-\\hat{p}}) \\pm z_{1-\\alpha/2} \\frac{SE(\\hat{p})}{\\hat{p}(1-\\hat{p})} \\] approach used CIs returned package.","code":""},{"path":"https://iden-project-uas-darmstadt.github.io/IPCWJK/reference/IPCWJK-package.html","id":"standard-error-using-a-weighted-jackknife-estimator","dir":"Reference","previous_headings":"","what":"Standard Error using a weighted jackknife Estimator","title":"IPCWJK: IPCW jackknife SE Estimation for right-censored survival data  — IPCWJK-package","text":"jackknife (Efron Hastie 2016)  estimate prediction standard error \\(n\\) models trained training data. \\(\\)th model \\(\\)th individual gets removed data. prediction model trained full data referred \\(\\hat{p}\\) prediction model removed individual \\(\\hat{p}_{-}\\). unweighted jackknife estimator defined : \\[\\hat{Var}(\\hat{p})=\\frac{n-1}{n}\\sum_{=1}^n(\\hat{p}-\\hat{p}_{-} )^2.\\] used predict() function, naive argument set TRUE. using IPCW weights influence individual depends weights therefore weights need accounted estimation. Instead weighting \\( \\hat{p}_{-}\\) prediction \\(\\frac{n-1}{n}\\), model prediction non-zero weight gets weighted \\(1-\\tilde{w}_i\\). assume weights already sum one. used default, naive set FALSE.","code":""},{"path":"https://iden-project-uas-darmstadt.github.io/IPCWJK/reference/IPCWJK-package.html","id":"models","dir":"Reference","previous_headings":"","what":"Models","title":"IPCWJK: IPCW jackknife SE Estimation for right-censored survival data  — IPCWJK-package","text":"IPCW weighting weighted jackknife standard error estimation implemented models inheriting ipcwmodel.","code":""},{"path":"https://iden-project-uas-darmstadt.github.io/IPCWJK/reference/IPCWJK-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"IPCWJK: IPCW jackknife SE Estimation for right-censored survival data  — IPCWJK-package","text":"Blanche PF, Holt , Scheike T (2023). “logistic regression right censored data, without competing risks, use estimating treatment effects.” Lifetime Data Analysis, 29(2), 441–482. ISSN 1380-7870, doi:10.1007/s10985-022-09564-6 . Efron B, Hastie T (2016). Computer age statistical inference: Algorithms, evidence, data science. Cambridge University Press. Holst KK, Scheike TH, Hjelmborg JB (2016). “Liability Threshold Model Censored Twin Data.” Computational Statistics Data Analysis, 93, 324-335. doi:10.1016/j.csda.2015.01.014 . Kvamme H, Borgan Ø (2023). “Brier Score Administrative Censoring: Problems Solutions.” Journal Machine Learning Research, 24, 1–26. 1912.08581. Perme MP, Manevski D (2019). “Confidence intervals Mann–Whitney test.” Statistical Methods Medical Research, 28(12), 3755–3768. ISSN 14770334, doi:10.1177/0962280218814556, , http://www.ncbi.nlm.nih.gov/pubmed/30514179. Reps JM, Rijnbeek P, Cuthbert , Ryan PB, Pratt N, Schuemie M (2021). “empirical analysis dealing patients lost follow-developing prognostic models using cohort design.” BMC medical informatics decision making, 21(1), 43. ISSN 1472-6947, doi:10.1186/s12911-021-01408-x , http://www.ncbi.nlm.nih.gov/pubmed/33549087. Scheike TH, Holst KK, B.Hjelmborg J (2014). “Estimating heritability cause specific mortality based twin studies.” Lifetime Data Analysis, 20(2), 210-233. doi:10.1007/s10985-013-9244-x .","code":""},{"path":[]},{"path":"https://iden-project-uas-darmstadt.github.io/IPCWJK/reference/IPCWJK-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"IPCWJK: IPCW jackknife SE Estimation for right-censored survival data  — IPCWJK-package","text":"Maintainer: Lukas Klein lukas.klein@h-da.de Authors: Antje Jahn-Eimermacher","code":""},{"path":"https://iden-project-uas-darmstadt.github.io/IPCWJK/reference/deltamethod_from_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict the standard error from a fitted model using the delta method — deltamethod_from_model","title":"Predict the standard error from a fitted model using the delta method — deltamethod_from_model","text":"Constructs prediction function estimates survival probability specified time horizon \\(|tau\\) fitted model, computes standard error Wald confidence interval using delta method.","code":""},{"path":"https://iden-project-uas-darmstadt.github.io/IPCWJK/reference/deltamethod_from_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict the standard error from a fitted model using the delta method — deltamethod_from_model","text":"","code":"deltamethod_from_model(model, tau, naive = FALSE)"},{"path":"https://iden-project-uas-darmstadt.github.io/IPCWJK/reference/deltamethod_from_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict the standard error from a fitted model using the delta method — deltamethod_from_model","text":"model fitted model object. Supported types survival::survreg() log-logistic distribution mets::logitIPCW(). tau Numeric scalar. time horizon survival probability estimated. naive Logical. TRUE, use naive variance estimator binreg models. FALSE (default), use robust variance estimator.","code":""},{"path":"https://iden-project-uas-darmstadt.github.io/IPCWJK/reference/deltamethod_from_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict the standard error from a fitted model using the delta method — deltamethod_from_model","text":"function(df, z = 1.96) takes data frame covariates df returns data frame columns prediction prediction, lower lower upper upper Wald confidence intervals, standard error se. function can also take optional argument z z-score used confidence interval calculation (default 1.96 95% confidence intervals).","code":""},{"path":"https://iden-project-uas-darmstadt.github.io/IPCWJK/reference/deltamethod_from_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predict the standard error from a fitted model using the delta method — deltamethod_from_model","text":"function supports models survival::survreg() log-logistic distribution models class binreg (fitted mets::logitIPCW()) (Blanche et al. 2023; Holst et al. 2016; Scheike et al. 2014) . binreg models, function can use either naive robust variance estimator, depending value naive argument.","code":""},{"path":"https://iden-project-uas-darmstadt.github.io/IPCWJK/reference/deltamethod_from_model.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Predict the standard error from a fitted model using the delta method — deltamethod_from_model","text":"Blanche PF, Holt , Scheike T (2023). “logistic regression right censored data, without competing risks, use estimating treatment effects.” Lifetime Data Analysis, 29(2), 441–482. ISSN 1380-7870, doi:10.1007/s10985-022-09564-6 . Holst KK, Scheike TH, Hjelmborg JB (2016). “Liability Threshold Model Censored Twin Data.” Computational Statistics Data Analysis, 93, 324-335. doi:10.1016/j.csda.2015.01.014 . Scheike TH, Holst KK, B.Hjelmborg J (2014). “Estimating heritability cause specific mortality based twin studies.” Lifetime Data Analysis, 20(2), 210-233. doi:10.1007/s10985-013-9244-x .","code":""},{"path":[]},{"path":"https://iden-project-uas-darmstadt.github.io/IPCWJK/reference/deltamethod_from_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict the standard error from a fitted model using the delta method — deltamethod_from_model","text":"","code":"library(survival) tau <- 100 df <- veteran[, c(\"time\", \"status\", \"trt\")] newdata <- data.frame(trt = c(1, 2))  # Fit a log-logistic survival model survreg_fit <- survreg(Surv(time, status) ~ trt,   data = df,   dist = \"loglogistic\" ) pred_fun <- deltamethod_from_model(survreg_fit, tau = tau) pred_fun(newdata) #>   prediction     lower     upper         se #> 1  0.4132020 0.3125587 0.5138454 0.05134864 #> 2  0.3461551 0.2489699 0.4433402 0.04958424  # Fit a logitIPCW model library(mets) logipcw_fit <- logitIPCW(Event(time, status) ~ trt, time = tau, data = df) predfun_logit <- deltamethod_from_model(logipcw_fit, tau = tau) pred_fun(newdata) #>   prediction     lower     upper         se #> 1  0.4132020 0.3125587 0.5138454 0.05134864 #> 2  0.3461551 0.2489699 0.4433402 0.04958424"},{"path":"https://iden-project-uas-darmstadt.github.io/IPCWJK/reference/deltamethod_pred_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict the standard error from a prediction formula using the delta method — deltamethod_pred_function","title":"Predict the standard error from a prediction formula using the delta method — deltamethod_pred_function","text":"Constructs prediction function computes model predictions, standard errors Wald confidence interval using delta method user-specified prediction formula.","code":""},{"path":"https://iden-project-uas-darmstadt.github.io/IPCWJK/reference/deltamethod_pred_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict the standard error from a prediction formula using the delta method — deltamethod_pred_function","text":"","code":"deltamethod_pred_function(   prediction_str,   coefs,   coef_cov,   additional_coefs = character(),   fixed_vars = numeric(),   logit = FALSE )"},{"path":"https://iden-project-uas-darmstadt.github.io/IPCWJK/reference/deltamethod_pred_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict the standard error from a prediction formula using the delta method — deltamethod_pred_function","text":"prediction_str Character. string specifying prediction formula, must contain one occurrence \"LP\" replaced linear predictor constructed coefficients covariate values. coefs Named numeric vector. estimated coefficients fitted model. names must correspond covariate names used model. coef_cov Square numeric matrix. covariance matrix estimated coefficients coefs. row column names must match names coefs. additional_coefs Character vector. Names coefficients coefs part linear predictor required prediction formula (default empty character vector). example estimated scale parametric survival model. fixed_vars Named numeric vector. Fixed values variables used prediction formula present new data (default empty numeric vector). logit Logical. TRUE, delta method used logit scale. ensures CIs 0 1 (default TRUE).","code":""},{"path":"https://iden-project-uas-darmstadt.github.io/IPCWJK/reference/deltamethod_pred_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict the standard error from a prediction formula using the delta method — deltamethod_pred_function","text":"function(df, z = 1.96) takes data frame covariates df returns data frame columns prediction prediction, lower lower upper upper Wald confidence intervals, standard error se. function can also take optional argument z z-score used confidence interval calculation (default 1.96 95% confidence intervals).","code":""},{"path":"https://iden-project-uas-darmstadt.github.io/IPCWJK/reference/deltamethod_pred_function.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predict the standard error from a prediction formula using the delta method — deltamethod_pred_function","text":"function intended use fitted regression models, including survival analysis, allows flexible specification linear predictor, additional coefficients, fixed covariate values. resulting function can applied new data obtain predictions, delta method-based standard errors confidence intervals. function used internally package deltamethod_from_model(). prediction function \\(g(\\theta)\\), standard error approximated \\[\\sqrt{\\nabla g(\\theta)^\\top \\Sigma \\nabla g(\\theta)}\\] \\(\\Sigma\\) covariance matrix estimated coefficients. input prediction_str must contain one occurrence \"LP\", replaced linear predictor constructed provided coefficients covariate values. logit=TRUE confidence intervals can calculated logit scale, see IPCWJK information.","code":""},{"path":"https://iden-project-uas-darmstadt.github.io/IPCWJK/reference/deltamethod_pred_function.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict the standard error from a prediction formula using the delta method — deltamethod_pred_function","text":"","code":"coefs <- c(\"(Intercept)\" = 0.5, \"age\" = 0.1, \"sex\" = -0.2) coef_cov <- diag(c(0.01, 0.0025, 0.0025)) rownames(coef_cov) <- colnames(coef_cov) <- names(coefs) pred_fun <- deltamethod_pred_function(   prediction_str = \"1 / (1 + exp(-(LP)))\",   coefs = coefs,   coef_cov = coef_cov ) newdata <- data.frame(age = c(50, 60), sex = c(1, 0)) pred_fun(newdata) #>   prediction     lower    upper          se #> 1  0.9950332 0.9707925 1.019274 0.012367680 #> 2  0.9984988 0.9896802 1.007317 0.004499284"},{"path":"https://iden-project-uas-darmstadt.github.io/IPCWJK/reference/ipcw_logistic_regression.html","id":null,"dir":"Reference","previous_headings":"","what":"IPCW Logistic Regression — ipcw_logistic_regression","title":"IPCW Logistic Regression — ipcw_logistic_regression","text":"Fits logistic regression model IPCW right-censored survival data. Jackknife model training performed.","code":""},{"path":"https://iden-project-uas-darmstadt.github.io/IPCWJK/reference/ipcw_logistic_regression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"IPCW Logistic Regression — ipcw_logistic_regression","text":"","code":"ipcw_logistic_regression(data, tau, time_var = \"t\", status_var = \"delta\")"},{"path":"https://iden-project-uas-darmstadt.github.io/IPCWJK/reference/ipcw_logistic_regression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"IPCW Logistic Regression — ipcw_logistic_regression","text":"data data frame containing survival data. Must include columns observed time event indicator. tau Numeric scalar. time horizon survival probability estimated. time_var Character. name variable data representing observed time event censoring. Default \"t\". status_var Character. name variable data representing event indicator (1 event occurred, 0 censored). Default \"delta\".","code":""},{"path":"https://iden-project-uas-darmstadt.github.io/IPCWJK/reference/ipcw_logistic_regression.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"IPCW Logistic Regression — ipcw_logistic_regression","text":"object class ipcwmodel.","code":""},{"path":"https://iden-project-uas-darmstadt.github.io/IPCWJK/reference/ipcw_logistic_regression.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"IPCW Logistic Regression — ipcw_logistic_regression","text":"Training performed using glm using quasibinomial family account weights.","code":""},{"path":[]},{"path":"https://iden-project-uas-darmstadt.github.io/IPCWJK/reference/ipcw_logistic_regression.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"IPCW Logistic Regression — ipcw_logistic_regression","text":"","code":"library(survival) tau <- 100 df <- veteran[, c(\"time\", \"status\", \"trt\")] newdata <- data.frame(trt = c(1, 2))  fit <- ipcw_logistic_regression(df,   tau = tau, time_var = \"time\",   status_var = \"status\" ) predict(fit, newdata) #>   prediction     lower     upper         se #> 1  0.4944833 0.3759158 0.6136746 0.06183589 #> 2  0.3329983 0.2281472 0.4574760 0.05939724"},{"path":"https://iden-project-uas-darmstadt.github.io/IPCWJK/reference/ipcw_weights.html","id":null,"dir":"Reference","previous_headings":"","what":"Use a Kaplan-Meier estimator to estimate IPCW weights — ipcw_weights","title":"Use a Kaplan-Meier estimator to estimate IPCW weights — ipcw_weights","text":"Computes inverse probability censoring weights (IPCW) right-censored survival data using pec::ipcw() function based Kaplan-Meier estimate censoring distribution \\(C\\).","code":""},{"path":"https://iden-project-uas-darmstadt.github.io/IPCWJK/reference/ipcw_weights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use a Kaplan-Meier estimator to estimate IPCW weights — ipcw_weights","text":"","code":"ipcw_weights(data, tau, time_var = \"t\", status_var = \"delta\")"},{"path":"https://iden-project-uas-darmstadt.github.io/IPCWJK/reference/ipcw_weights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use a Kaplan-Meier estimator to estimate IPCW weights — ipcw_weights","text":"data data frame containing survival data. Must include columns observed time event indicator. tau Numeric scalar. time horizon survival probability estimated. time_var Character. name variable data representing observed time event censoring. Default \"t\". status_var Character. name variable data representing event indicator (1 event occurred, 0 censored). Default \"delta\".","code":""},{"path":"https://iden-project-uas-darmstadt.github.io/IPCWJK/reference/ipcw_weights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use a Kaplan-Meier estimator to estimate IPCW weights — ipcw_weights","text":"numeric vector IPCW weights, ordered original data. weights normalized (sum one).","code":""},{"path":"https://iden-project-uas-darmstadt.github.io/IPCWJK/reference/ipcw_weights.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Use a Kaplan-Meier estimator to estimate IPCW weights — ipcw_weights","text":"Weighting observations Inverse Probability Censoring proposed prevent bias introduced removing censored individuals (Vock et al. 2016; Ginestet et al. 2021; Blanche et al. 2023)  improve model performance. \\[ \\tilde{w}_i = \\left\\lbrace \\begin{array}{ll}  0, & c_i < \\tau \\wedge t^*_i \\cr  \\frac{1}{P(C > \\tau \\mid X = x_i)}, & \\tau < c_i \\wedge t^*_i \\cr  \\frac{1}{P(C > t_i \\mid X = x_i)}, & t^*_i < c_i \\wedge \\tau \\end{array} \\right. \\] function uses pec::ipcw() (Gerds 2023)  function compute IPCW weights. normalized (sum one).","code":""},{"path":"https://iden-project-uas-darmstadt.github.io/IPCWJK/reference/ipcw_weights.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Use a Kaplan-Meier estimator to estimate IPCW weights — ipcw_weights","text":"Blanche PF, Holt , Scheike T (2023). “logistic regression right censored data, without competing risks, use estimating treatment effects.” Lifetime Data Analysis, 29(2), 441–482. ISSN 1380-7870, doi:10.1007/s10985-022-09564-6 . Gerds TA (2023). pec: Prediction Error Curves Risk Prediction Models Survival Analysis. R package version 2023.04.12, https://CRAN.R-project.org/package=pec. Ginestet GP, Kotalik , Vock DM, Wolfson J, Gabriel EE (2021). “Stacked Inverse Probability Censoring Weighted Bagging Case Study InfCareHIV Register.” Journal Royal Statistical Society Series C: Applied Statistics, 70, 51–65. doi:10.1111/rssc.12448 . Vock DM, Wolfson J, Bandyopadhyay S, Adomavicius G, Johnson PE, Vazquez-Benitez G, O'Connor PJ (2016). “Adapting machine learning techniques censored time--event health record data general-purpose approach using inverse probability censoring weighting.” Journal Biomedical Informatics, 61, 119–131. doi:10.1016/j.jbi.2016.03.009 .","code":""},{"path":[]},{"path":"https://iden-project-uas-darmstadt.github.io/IPCWJK/reference/ipcw_weights.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use a Kaplan-Meier estimator to estimate IPCW weights — ipcw_weights","text":"","code":"data <- data.frame(   t = c(5, 8, 12, 15, 20),   delta = c(1, 0, 1, 0, 1) ) w <- ipcw_weights(data, tau = 10)"},{"path":"https://iden-project-uas-darmstadt.github.io/IPCWJK/reference/ipcw_xgboost.html","id":null,"dir":"Reference","previous_headings":"","what":"IPCW XGBoost Binary Classifier — ipcw_xgboost","title":"IPCW XGBoost Binary Classifier — ipcw_xgboost","text":"Fits binary classification model using XGBoost IPCW right-censored survival data. Hyperparameter tuning Jackknife model training performed.","code":""},{"path":"https://iden-project-uas-darmstadt.github.io/IPCWJK/reference/ipcw_xgboost.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"IPCW XGBoost Binary Classifier — ipcw_xgboost","text":"","code":"ipcw_xgboost(   data,   tau,   time_var = \"t\",   status_var = \"delta\",   verbose = 0,   grid = ipcw_xgboost_default_grid(),   nrounds = 100,   early_stopping_rounds = 10,   nfold = 3,   nthread = 1 )  ipcw_xgboost_default_grid()"},{"path":"https://iden-project-uas-darmstadt.github.io/IPCWJK/reference/ipcw_xgboost.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"IPCW XGBoost Binary Classifier — ipcw_xgboost","text":"data data frame containing survival data. Must include columns observed time event indicator. tau Numeric scalar. time horizon survival probability estimated. time_var Character. name variable data representing observed time event censoring. Default \"t\". status_var Character. name variable data representing event indicator (1 event occurred, 0 censored). Default \"delta\". verbose Integer. Verbosity level XGBoost training cross-validation (default 0). grid Data frame. Grid hyperparameters test cross-validation. default return `ipcw_xgboost_default_grid()“. nrounds Integer. Maximum number boosting rounds XGBoost training cross-validation (default 100). early_stopping_rounds Integer. Number rounds improvement trigger early stopping cross-validation (default 10). nfold Integer. Number folds cross-validation (default 3). nthread Integer. Number threads use XGBoost training (default 1).","code":""},{"path":"https://iden-project-uas-darmstadt.github.io/IPCWJK/reference/ipcw_xgboost.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"IPCW XGBoost Binary Classifier — ipcw_xgboost","text":"object class ipcwmodel.","code":""},{"path":"https://iden-project-uas-darmstadt.github.io/IPCWJK/reference/ipcw_xgboost.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"IPCW XGBoost Binary Classifier — ipcw_xgboost","text":"Training performed using xgboost package (Chen Guestrin 2016)  based \"binary:logistic\" objective. Hyperparameter tuning done using three (nfold) fold cross-validation grid parameters. best parameters selected based minimum test log loss 100 (nrounds) rounds early stopping (10 rounds, early_stopping_rounds). Note tested hyperparameters based simulation useful datasets. tested hyperparameters include: booster: \"gbtree\" \"gblinear\". eta: Learning rate, tested 1 / 10^(0:5). Forbooster=\"gblinear\": max_depth: Maximum depth tree, tested c(12, 6, 3, 1). best parameters, model trained full dataset.","code":""},{"path":"https://iden-project-uas-darmstadt.github.io/IPCWJK/reference/ipcw_xgboost.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"IPCW XGBoost Binary Classifier — ipcw_xgboost","text":"ipcw_xgboost_default_grid(): Returns default grid hyperparameters.","code":""},{"path":"https://iden-project-uas-darmstadt.github.io/IPCWJK/reference/ipcw_xgboost.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"IPCW XGBoost Binary Classifier — ipcw_xgboost","text":"Chen T, Guestrin C (2016). “XGBoost: Scalable Tree Boosting System.” Proceedings 22nd ACM SIGKDD International Conference Knowledge Discovery Data Mining,  KDD '16, 785–794. ISBN 978-1-4503-4232-2, doi:10.1145/2939672.2939785 , http://doi.acm.org/10.1145/2939672.2939785.","code":""},{"path":[]},{"path":"https://iden-project-uas-darmstadt.github.io/IPCWJK/reference/ipcw_xgboost.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"IPCW XGBoost Binary Classifier — ipcw_xgboost","text":"","code":"library(survival) tau <- 100 df <- veteran[, c(\"time\", \"status\", \"trt\")] newdata <- data.frame(trt = c(1, 2))  fit <- ipcw_xgboost(df,   tau = tau, time_var = \"time\",   status_var = \"status\" ) predict(fit, newdata) #>   prediction     lower     upper         se #> 1  0.4362208 0.3787636 0.4954429 0.02989897 #> 2  0.4047836 0.3287710 0.4856550 0.04034125"},{"path":"https://iden-project-uas-darmstadt.github.io/IPCWJK/reference/ipcwmodel.html","id":null,"dir":"Reference","previous_headings":"","what":"IPCW Model Class — ipcwmodel","title":"IPCW Model Class — ipcwmodel","text":"ipcwmodel objects contain fitted model, models fitted jackknife samples, prediction function, training Brier score, metadata model.","code":""},{"path":"https://iden-project-uas-darmstadt.github.io/IPCWJK/reference/ipcwmodel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"IPCW Model Class — ipcwmodel","text":"","code":"ipcwmodel(   model_name,   full_model,   jackknife_models,   tau,   predict,   train_brier,   time_var,   status_var,   training_vars,   w,   additional_information = list() )  # S3 method for class 'ipcwmodel' predict(object, newdata, naive = FALSE, z = 1.96, ...)"},{"path":"https://iden-project-uas-darmstadt.github.io/IPCWJK/reference/ipcwmodel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"IPCW Model Class — ipcwmodel","text":"model_name Character. name model. full_model fitted model object full dataset. jackknife_models List fitted models, omitting one observation (jackknife resamples). tau Numeric. time horizon survival estimated. predict Function. prediction function fitted model. train_brier Numeric. Brier score fitted model training data. time_var Character. name time variable data. status_var Character. name status variable data. training_vars Character vector. names covariates used model fitting. w Numeric vector. IPCW weights used model fitting. additional_information List. Additional information stored model object (default empty list). object object class ipcwmodel. newdata data frame containing covariates predictions made. naive Logical. TRUE, use naive jackknife variance estimator. False, use IPCW-weighted estimator. z Numeric. z-score use confidence interval. Default 1.96, corresponding 95% confidence interval. ... Additional arguments (currently ignored).","code":""},{"path":"https://iden-project-uas-darmstadt.github.io/IPCWJK/reference/ipcwmodel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"IPCW Model Class — ipcwmodel","text":"object class ipcwmodel containing model details.","code":""},{"path":"https://iden-project-uas-darmstadt.github.io/IPCWJK/reference/ipcwmodel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"IPCW Model Class — ipcwmodel","text":"Models can used calling predict(model, newdata) method. returns data frame columns prediction prediction, lower lower upper upper Wald confidence intervals, standard error se. function can also take optional argument z z-score used confidence interval calculation. confidence intervals standard errors can computed using either naive approach (using number jackknife models minus one denominator) robust approach (using IPCW weights). controlled naive argument predict method. Wald confidence intervals calculated logit scale. See IPCWJK information.","code":""},{"path":"https://iden-project-uas-darmstadt.github.io/IPCWJK/reference/ipcwmodel.html","id":"methods-by-generic-","dir":"Reference","previous_headings":"","what":"Methods (by generic)","title":"IPCW Model Class — ipcwmodel","text":"predict(ipcwmodel): Predict method ipcwmodel objects.","code":""},{"path":"https://iden-project-uas-darmstadt.github.io/IPCWJK/news/index.html","id":"ipcwjk-development-version","dir":"Changelog","previous_headings":"","what":"IPCWJK (development version)","title":"IPCWJK (development version)","text":"Initial package functionality","code":""},{"path":[]},{"path":"https://iden-project-uas-darmstadt.github.io/IPCWJK/news/index.html","id":"major-changes-0-1-0-9000","dir":"Changelog","previous_headings":"","what":"Major changes","title":"IPCWJK 0.1.0.9000","text":"Initial package functionality","code":""},{"path":"https://iden-project-uas-darmstadt.github.io/IPCWJK/news/index.html","id":"minor-improvements-and-bug-fixes-0-1-0-9000","dir":"Changelog","previous_headings":"","what":"Minor improvements and bug fixes","title":"IPCWJK 0.1.0.9000","text":"None","code":""}]
