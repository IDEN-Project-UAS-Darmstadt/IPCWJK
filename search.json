[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 IPCWJK authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/ipcw_models.html","id":"parametric-model","dir":"Articles","previous_headings":"","what":"Parametric Model","title":"IPCW Models for Survival Analysis","text":"can model data parametric survival model example. Based model can predict survival probability \\(\\tau\\) get standard error prediction using delta method.","code":"library(survival) parmmodel <- survreg(Surv(t, delta) ~ x1 + x2, data = df, dist = \"loglogistic\") parmmodel_pred <- deltamethod_from_model(parmmodel, tau)   y <- 1 * (df$t > tau) pred <- parmmodel_pred(df)$prediction # This is ok, as the censored observations before tau are not used parmmodel_train_brier <- sum(w * (pred - y)**2) / sum(w)  parmmodel #> Call: #> survreg(formula = Surv(t, delta) ~ x1 + x2, data = df, dist = \"loglogistic\") #>  #> Coefficients: #> (Intercept)          x1          x2  #>   0.9442538  -0.5457500   0.4917848  #>  #> Scale= 0.9492391  #>  #> Loglik(model)= -840.9   Loglik(intercept only)= -869.1 #>  Chisq= 56.45 on 2 degrees of freedom, p= 5.51e-13  #> n= 500 parmmodel_predictions <- parmmodel_pred(test_data)  parmmodel_predictions #>   prediction     lower     upper         se #> 1  0.3191662 0.2546988 0.3836337 0.03289157 #> 2  0.2182849 0.1662348 0.2703350 0.02655618"},{"path":"/articles/ipcw_models.html","id":"ipcw-xgboost-model","dir":"Articles","previous_headings":"","what":"IPCW XGBoost Model","title":"IPCW Models for Survival Analysis","text":"","code":"xgbmodel <- ipcw_xgboost(df, tau,   time_var = \"t\",   status_var = \"delta\", verbose = 0 )  xgb_train_brier <- sum(w * (predict(xgbmodel, df)$prediction - y)**2) / sum(w)  xgbmodel #> IPCW Model #> ----------- #> Model name:  IPCW XGBoost  #> Tau (time horizon):  5  #> Time variable:  t  #> Status variable:  delta  #> Training variables:  x1, x2  #> Number of training samples:  500  #> Number of unusable training samples:  116  #> Number of (effective) training samples:  500  #> Train Brier score:  0.207  #> Additional information: #>   - params_passed : $objective #>     [1] \"binary:logistic\" #>      #>     $booster #>     [1] \"gblinear\" #>      #>     $eta #>     [1] 0.1 #> xgbmodel_predictions <- predict(xgbmodel, test_data) xgbmodel_predictions #>   prediction     lower     upper         se #> 1  0.3047837 0.2313039 0.3897704 0.04068547 #> 2  0.1688837 0.1228487 0.2276913 0.02665202"},{"path":"/articles/ipcw_models.html","id":"logistic-regression-model-with-logitipcw","dir":"Articles","previous_headings":"","what":"Logistic Regression Model with logitIPCW","title":"IPCW Models for Survival Analysis","text":"","code":"library(mets) logitipcw_m <- logitIPCW(Event(t, delta) ~ x1 + x2, time = tau, data = df)  logitipcw_pred_corre <- deltamethod_from_model(logitipcw_m, tau) logitipcw_pred_naive <- deltamethod_from_model(logitipcw_m, tau, naive = TRUE)  pred <- logitipcw_pred_corre(df)$prediction logitipcw_train_brier <- sum(w * (pred - y)^2) / sum(w)  logitipcw_m #>  #>    n events #>  500    259 #>  #>  500 clusters #> coeffients: #>             Estimate  Std.Err     2.5%    97.5% P-value #> (Intercept)  0.95554  0.18334  0.59620  1.31487   0e+00 #> x1           0.70741  0.12264  0.46703  0.94779   0e+00 #> x2          -0.84585  0.23915 -1.31458 -0.37711   4e-04 #>  #> exp(coeffients): #>             Estimate    2.5%  97.5% #> (Intercept)  2.60007 1.81522 3.7243 #> x1           2.02874 1.59525 2.5800 #> x2           0.42919 0.26859 0.6858 logitipcw_predictions_corre <- logitipcw_pred_corre(test_data) logitipcw_predictions_corre #>   prediction      lower     upper         se #> 1  0.3063786 0.22074358 0.3920137 0.04369135 #> 2  0.1593662 0.09437084 0.2243616 0.03316091 logitipcw_predictions_naive <- logitipcw_pred_naive(test_data) logitipcw_predictions_naive #>   prediction      lower     upper         se #> 1  0.3063786 0.21931083 0.3934464 0.04442234 #> 2  0.1593662 0.09360199 0.2251305 0.03355319"},{"path":"/articles/ipcw_models.html","id":"logistic-regression-model-with-ipcw","dir":"Articles","previous_headings":"","what":"Logistic Regression Model with IPCW","title":"IPCW Models for Survival Analysis","text":"","code":"logreg <- ipcw_logistic_regression(df, tau,   time_var = \"t\",   status_var = \"delta\" )  logreg_train_brier <- sum(w * (predict(logreg, df)$prediction - y)**2) / sum(w)  logreg #> IPCW Model #> ----------- #> Model name:  IPCW Logistic Regression  #> Tau (time horizon):  5  #> Time variable:  t  #> Status variable:  delta  #> Training variables:  x1, x2  #> Number of training samples:  500  #> Number of unusable training samples:  116  #> Number of (effective) training samples:  500  #> Train Brier score:  0.207 logreg_predictions <- predict(logreg, test_data) logreg_predictions #>   prediction     lower     upper         se #> 1  0.3063786 0.2320556 0.3923443 0.04116160 #> 2  0.1593662 0.1120122 0.2217405 0.02784626"},{"path":"/articles/ipcw_models.html","id":"comparison-xgboost-vs-parametric-only-for-now","dir":"Articles","previous_headings":"","what":"Comparison (XGBoost vs Parametric only for now)","title":"IPCW Models for Survival Analysis","text":"","code":"brier_scores <- data.frame(   Model = c(\"Parametric\", \"XGBoost\"),   Brier_Score = c(parmmodel_train_brier, xgb_train_brier) )  barplot(   brier_scores$Brier_Score,   names.arg = brier_scores$Model,   main = \"Brier Scores by Model\",   ylab = \"Brier Score\" ) for (i in seq_len(nrow(test_data))) {   true_prob <- test_data_true_probs[i]   predictions_comparison <- data.frame(     Model = c(\"Parametric\", \"XGBoost\"),     Prediction = c(       parmmodel_predictions[i, \"Prediction\"],       xgbmodel_predictions[i, \"prediction\"]     )   )    if (i == 1) {     par(mfrow = c(1, nrow(test_data)))   }    barplot(     predictions_comparison$Prediction,     names.arg = predictions_comparison$Model,     main = paste(\"Test Case\", i),     ylab = \"Predicted Probability\",     ylim = c(0, 1)   )   abline(h = true_prob, col = \"red\", lwd = 2)   legend(     \"topright\",     legend = paste(\"True Probability =\", round(true_prob, 3)),     col = \"red\",     lwd = 2,     bty = \"n\"   )    # Reset plotting area after last plot   if (i == nrow(test_data)) {     par(mfrow = c(1, 1))   } }"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Antje Jahn-Eimermacher. Author. Lukas Klein. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Jahn-Eimermacher , Klein L (2025). IPCWJK: IPCW Jackknife Methods Standard Errors Survival Prediction. R package version 0.0.0.9000.","code":"@Manual{,   title = {IPCWJK: IPCW Jackknife Methods for Standard Errors in Survival Prediction},   author = {Antje Jahn-Eimermacher and Lukas Klein},   year = {2025},   note = {R package version 0.0.0.9000}, }"},{"path":"/index.html","id":"ipcwjk","dir":"","previous_headings":"","what":"IPCW Jackknife Methods for Standard Errors in Survival Prediction","title":"IPCW Jackknife Methods for Standard Errors in Survival Prediction","text":"documentation available https://github.com/IDEN-Project-UAS-Darmstadt/IPCWJK","code":"#> IPCW Jackknife Methods for Standard Errors in Survival Prediction  #> Provides functions for fitting binary classification models with #>  inverse probability of censoring weights (IPCW) to estimate survival  #>  probabilities, and implements Jackknife resampling methods for unbiased  #>  prediction error estimation in survival analysis. The package supports model  #>  fitting, IPCW calculation, and Jackknife error estimation."},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"IPCW Jackknife Methods for Standard Errors in Survival Prediction","text":"can install development version IPCWJK like :","code":"# With remotes remotes::install_github(\"IDEN-Project-UAS-Darmstadt/IPCWJK\") # With pak (recommended for speed) pak::pkg_install(\"IDEN-Project-UAS-Darmstadt/IPCWJK\")"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"IPCW Jackknife Methods for Standard Errors in Survival Prediction","text":"","code":"library(survival) tau <- 80 df <- veteran[, c(\"time\", \"status\", \"trt\")] newdata <- data.frame(trt = c(1, 2))  # Calculation of IPCW weights at tau library(IPCWJK) w <- ipcw_weights(df, tau, time_var = \"time\", status_var = \"status\") hist(w,   breaks = 30,   xlab = \"IPCW Weight\", col = \"lightblue\", border = \"grey\" ) # Fit a log-logistic survival model survreg_fit <- survreg(Surv(time, status) ~ trt,   data = df,   dist = \"loglogistic\" ) # This provides you with an Wald CI on the logit scale: pred_fun <- deltamethod_from_model(survreg_fit, tau = tau) pred_fun(newdata) #>   prediction     lower     upper         se #> 1  0.4834551 0.3802014 0.5867088 0.05268045 #> 2  0.4130325 0.3106990 0.5153660 0.05221096  # Fit a logitIPCW model library(mets) logipcw_fit <- logitIPCW(Event(time, status) ~ trt, time = tau, data = df) predfun_logit <- deltamethod_from_model(logipcw_fit, tau = tau) pred_fun(newdata) #>   prediction     lower     upper         se #> 1  0.4834551 0.3802014 0.5867088 0.05268045 #> 2  0.4130325 0.3106990 0.5153660 0.05221096  # IPCW Logistic Regression fit <- ipcw_logistic_regression(df,   tau = tau, time_var = \"time\",   status_var = \"status\" ) predict(fit, newdata) #>   prediction     lower     upper         se #> 1  0.5602241 0.4397994 0.6739532 0.06084509 #> 2  0.4277286 0.3149444 0.5485602 0.06069209  # IPCW XGBoost Classifier fit <- ipcw_xgboost(df, tau = tau, time_var = \"time\", status_var = \"status\") predict(fit, newdata) #>   prediction     lower     upper         se #> 1  0.4919162 0.4324719 0.5515900 0.03053219 #> 2  0.4809798 0.3994607 0.5635243 0.04223412"},{"path":"/index.html","id":"development","dir":"","previous_headings":"","what":"Development","title":"IPCW Jackknife Methods for Standard Errors in Survival Prediction","text":"Restore development environment : use anything available devtools package develop package.","code":"renv::restore() library(devtools) document() # to update documentation and roxygen functionality load_all() # to load the package functions for development build_readme() # to update the README test() # to run tests check() # to check the package covr::package_coverage() # to check code coverage styler::style_pkg() # to style the code lint() # to check the code for linting issues"},{"path":"/reference/IPCWJK-package.html","id":null,"dir":"Reference","previous_headings":"","what":"IPCWJK: IPCW Jackknife SE Estimation for right-censored survival data  — IPCWJK-package","title":"IPCWJK: IPCW Jackknife SE Estimation for right-censored survival data  — IPCWJK-package","text":"Provides functions fitting binary classification models inverse probability censoring weights (IPCW) estimate survival probabilities, implements Jackknife resampling methods unbiased prediction error estimation survival analysis. package supports model fitting, IPCW calculation, Jackknife error estimation.","code":""},{"path":"/reference/IPCWJK-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"IPCWJK: IPCW Jackknife SE Estimation for right-censored survival data  — IPCWJK-package","text":"references Rd macro \\insertAllCites help page.","code":""},{"path":"/reference/IPCWJK-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"IPCWJK: IPCW Jackknife SE Estimation for right-censored survival data  — IPCWJK-package","text":"Maintainer: Lukas Klein lukas.klein@h-da.de Authors: Antje Jahn-Eimermacher","code":""},{"path":"/reference/deltamethod_from_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict the standard error from a fitted model using the delta method — deltamethod_from_model","title":"Predict the standard error from a fitted model using the delta method — deltamethod_from_model","text":"Constructs prediction function estimates survival probability specified time horizon \\(tau\\) fitted survival model, computes standard error Wald confidence interval using delta method.","code":""},{"path":"/reference/deltamethod_from_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict the standard error from a fitted model using the delta method — deltamethod_from_model","text":"","code":"deltamethod_from_model(model, tau, naive = FALSE)"},{"path":"/reference/deltamethod_from_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict the standard error from a fitted model using the delta method — deltamethod_from_model","text":"model fitted model object. Supported types survreg log-logistic distribution binreg (e.g., logitIPCW). tau Numeric scalar. time horizon survival probability estimated. naive Logical. TRUE, use naive variance estimator binreg models. FALSE (default), use robust variance estimator.","code":""},{"path":"/reference/deltamethod_from_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict the standard error from a fitted model using the delta method — deltamethod_from_model","text":"function takes data frame covariates returns data frame columns prediction, lower upper Wald confidence intervals, standard error. function can also take optional argument z z-score used confidence interval calculation (default 1.96 95% CI).","code":""},{"path":"/reference/deltamethod_from_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predict the standard error from a fitted model using the delta method — deltamethod_from_model","text":"function supports models class survreg log-logistic distribution models class binreg (fitted logitIPCW). binreg models, function can use either naive robust variance estimator, depending value naive argument.","code":""},{"path":"/reference/deltamethod_from_model.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Predict the standard error from a fitted model using the delta method — deltamethod_from_model","text":"references Rd macro \\insertAllCites help page.","code":""},{"path":[]},{"path":"/reference/deltamethod_from_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict the standard error from a fitted model using the delta method — deltamethod_from_model","text":"","code":"# veteran data example library(survival) tau <- 80 df <- veteran[, c(\"time\", \"status\", \"trt\")] newdata <- data.frame(trt = c(1, 2))  # Fit a log-logistic survival model survreg_fit <- survreg(Surv(time, status) ~ trt,   data = df,   dist = \"loglogistic\" ) pred_fun <- deltamethod_from_model(survreg_fit, tau = tau) pred_fun(newdata) #>   prediction     lower     upper         se #> 1  0.4834551 0.3802014 0.5867088 0.05268045 #> 2  0.4130325 0.3106990 0.5153660 0.05221096  # Fit a logitIPCW model library(mets) logipcw_fit <- logitIPCW(Event(time, status) ~ trt, time = tau, data = df) predfun_logit <- deltamethod_from_model(logipcw_fit, tau = tau) pred_fun(newdata) #>   prediction     lower     upper         se #> 1  0.4834551 0.3802014 0.5867088 0.05268045 #> 2  0.4130325 0.3106990 0.5153660 0.05221096"},{"path":"/reference/deltamethod_pred_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply the delta method based on a prediction formula — deltamethod_pred_function","title":"Apply the delta method based on a prediction formula — deltamethod_pred_function","text":"Constructs prediction function computes model predictions standard errors Wald confidence interval using delta method user-specified prediction formula.","code":""},{"path":"/reference/deltamethod_pred_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply the delta method based on a prediction formula — deltamethod_pred_function","text":"","code":"deltamethod_pred_function(   prediction_str,   coefs,   coef_cov,   additional_coefs = character(),   fixed_vars = list(),   logit = FALSE )"},{"path":"/reference/deltamethod_pred_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply the delta method based on a prediction formula — deltamethod_pred_function","text":"prediction_str Character. string specifying prediction formula, must contain one occurrence \"LP\" replaced linear predictor constructed coefficients covariate values. coefs Named numeric vector. estimated coefficients fitted model. names must correspond covariate names used model. coef_cov Square numeric matrix. covariance matrix estimated coefficients. row column names must match names coefs. additional_coefs Character vector. Names coefficients coefs part linear predictor required prediction formula (default empty character vector). fixed_vars List. Named list fixed values variables used prediction formula present new data (default empty list). logit Logical. TRUE, delta method used logit scale. ensures CIs 0 1 (default TRUE).","code":""},{"path":"/reference/deltamethod_pred_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply the delta method based on a prediction formula — deltamethod_pred_function","text":"function takes data frame covariates returns data frame columns prediction, lower upper Wald confidence intervals, standard error. function can also take optional argument z z-score used confidence interval calculation (default 1.96 95% CI).","code":""},{"path":"/reference/deltamethod_pred_function.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Apply the delta method based on a prediction formula — deltamethod_pred_function","text":"function intended use fitted regression models, including survival analysis, allows flexible specification linear predictor, additional coefficients, fixed covariate values. resulting function can applied new data obtain predictions delta method-based standard errors. function used internally package provide delta method-based standard errors comparison. prediction function \\(g(\\theta)\\), standard error approximated \\[\\sqrt{\\nabla g(\\theta)^\\top \\Sigma \\nabla g(\\theta)}\\] \\(\\Sigma\\) covariance matrix estimated coefficients. input prediction_str must contain one occurrence \"LP\", replaced linear predictor constructed provided coefficients covariate values.","code":""},{"path":"/reference/deltamethod_pred_function.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Apply the delta method based on a prediction formula — deltamethod_pred_function","text":"references Rd macro \\insertAllCites help page.","code":""},{"path":[]},{"path":"/reference/deltamethod_pred_function.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply the delta method based on a prediction formula — deltamethod_pred_function","text":"","code":"coefs <- c(\"(Intercept)\" = 0.5, \"age\" = 0.1, \"sex\" = -0.2) coef_cov <- diag(c(0.01, 0.0025, 0.0025)) rownames(coef_cov) <- colnames(coef_cov) <- names(coefs) pred_fun <- deltamethod_pred_function(   prediction_str = \"1 / (1 + exp(-(LP)))\",   coefs = coefs,   coef_cov = coef_cov ) newdata <- data.frame(age = c(50, 60), sex = c(1, 0)) pred_fun(newdata) #>   prediction     lower    upper          se #> 1  0.9950332 0.9707925 1.019274 0.012367680 #> 2  0.9984988 0.9896802 1.007317 0.004499284"},{"path":"/reference/ipcw_logistic_regression.html","id":null,"dir":"Reference","previous_headings":"","what":"IPCW Logistic Regression — ipcw_logistic_regression","title":"IPCW Logistic Regression — ipcw_logistic_regression","text":"Fits logistic regression model IPCW right-censored survival data. Jackknife model training performed.","code":""},{"path":"/reference/ipcw_logistic_regression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"IPCW Logistic Regression — ipcw_logistic_regression","text":"","code":"ipcw_logistic_regression(data, tau, time_var = \"t\", status_var = \"delta\")"},{"path":"/reference/ipcw_logistic_regression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"IPCW Logistic Regression — ipcw_logistic_regression","text":"data data frame containing survival data. Must include columns observed time event indicator. tau Numeric scalar. time horizon survival probability estimated. time_var Character. name variable data representing observed time event censoring. Default \"t\". status_var Character. name variable data representing event indicator (1 event occurred, 0 censored). Default \"delta\".","code":""},{"path":"/reference/ipcw_logistic_regression.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"IPCW Logistic Regression — ipcw_logistic_regression","text":"object class IPCWModel.","code":""},{"path":"/reference/ipcw_logistic_regression.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"IPCW Logistic Regression — ipcw_logistic_regression","text":"Training performed using glm function stats package, using quasibinomial family account weights.","code":""},{"path":"/reference/ipcw_logistic_regression.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"IPCW Logistic Regression — ipcw_logistic_regression","text":"references Rd macro \\insertAllCites help page.","code":""},{"path":[]},{"path":"/reference/ipcw_logistic_regression.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"IPCW Logistic Regression — ipcw_logistic_regression","text":"","code":"#' # veteran data example library(survival) tau <- 80 df <- veteran[, c(\"time\", \"status\", \"trt\")] newdata <- data.frame(trt = c(1, 2))  fit <- ipcw_logistic_regression(df,   tau = tau, time_var = \"time\",   status_var = \"status\" ) predict(fit, newdata) #>   prediction     lower     upper         se #> 1  0.5602241 0.4397994 0.6739532 0.06084509 #> 2  0.4277286 0.3149444 0.5485602 0.06069209"},{"path":"/reference/ipcw_weights.html","id":null,"dir":"Reference","previous_headings":"","what":"Use a Kaplan-Meier estimator to estimate IPCW weights — ipcw_weights","title":"Use a Kaplan-Meier estimator to estimate IPCW weights — ipcw_weights","text":"Computes inverse probability censoring weights (IPCW) right-censored survival data using pec::ipcw function.","code":""},{"path":"/reference/ipcw_weights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use a Kaplan-Meier estimator to estimate IPCW weights — ipcw_weights","text":"","code":"ipcw_weights(data, tau, time_var = \"t\", status_var = \"delta\")"},{"path":"/reference/ipcw_weights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use a Kaplan-Meier estimator to estimate IPCW weights — ipcw_weights","text":"data data frame containing survival data. Must include columns observed time event indicator. tau Numeric scalar. time horizon survival probability estimated. time_var Character. name variable data representing observed time event censoring. Default \"t\". status_var Character. name variable data representing event indicator (1 event occurred, 0 censored). Default \"delta\".","code":""},{"path":"/reference/ipcw_weights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use a Kaplan-Meier estimator to estimate IPCW weights — ipcw_weights","text":"numeric vector IPCW weights, ordered original data. weights normalized (scaled sum one).","code":""},{"path":"/reference/ipcw_weights.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Use a Kaplan-Meier estimator to estimate IPCW weights — ipcw_weights","text":"Predicting survival probability right-censored event time outcome specific time horizon \\(\\tau\\) can performed using binary classifiers. purpose, event time outcome dichotomized binary variable indicating whether subject survived time \\(\\tau\\) . However, approach can account subjects lost follow-time \\(\\tau\\) therefore experiencing event interest. leads worse discrimination calibration model (Reps et al. 2021; Kvamme Borgan 2023) . Weighting observations Inverse Probability Censoring proposed prevent bias (Vock et al. 2016; Ginestet et al. 2021; Blanche et al. 2023)  improve model performance. \\[ \\tilde{w}_i = \\left\\lbrace \\begin{array}{ll}  0, & c_i < \\tau \\wedge t^*_i \\cr  \\frac{1}{\\mathbb{P}(C > \\tau \\mid X = x_i)}, & \\tau < c_i \\wedge t^*_i \\cr  \\frac{1}{\\mathbb{P}(C > t_i \\mid X = x_i)}, & t^*_i < c_i \\wedge \\tau \\end{array} \\right. \\] function uses pec::ipcw(Gerds 2023)  function compute IPCW weights. normalized (scaled sum one).","code":""},{"path":"/reference/ipcw_weights.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Use a Kaplan-Meier estimator to estimate IPCW weights — ipcw_weights","text":"Blanche PF, Holt , Scheike T (2023). “logistic regression right censored data, without competing risks, use estimating treatment effects.” Lifetime Data Analysis, 29(2), 441–482. ISSN 1380-7870, doi:10.1007/s10985-022-09564-6 . Gerds TA (2023). pec: Prediction Error Curves Risk Prediction Models Survival Analysis. R package version 2023.04.12, https://CRAN.R-project.org/package=pec. Ginestet GP, Kotalik , Vock DM, Wolfson J, Gabriel EE (2021). “Stacked Inverse Probability Censoring Weighted Bagging Case Study InfCareHIV Register.” Journal Royal Statistical Society Series C: Applied Statistics, 70, 51–65. doi:10.1111/rssc.12448 , https://academic.oup.com/jrsssc/article/70/1/51/7033916 http://dx.doi.org/10.1111/rssc.12448. Kvamme H, Borgan Ø (2023). “Brier Score Administrative Censoring: Problems Solutions.” Journal Machine Learning Research, 24, 1–26. 1912.08581, http://arxiv.org/abs/1912.08581. Reps JM, Rijnbeek P, Cuthbert , Ryan PB, Pratt N, Schuemie M (2021). “empirical analysis dealing patients lost follow-developing prognostic models using cohort design.” BMC medical informatics decision making, 21(1), 43. ISSN 1472-6947, doi:10.1186/s12911-021-01408-x , http://www.ncbi.nlm.nih.gov/pubmed/33549087. Vock DM, Wolfson J, Bandyopadhyay S, Adomavicius G, Johnson PE, Vazquez-Benitez G, O'Connor PJ (2016). “Adapting machine learning techniques censored time--event health record data general-purpose approach using inverse probability censoring weighting.” Journal Biomedical Informatics, 61, 119–131. doi:10.1016/j.jbi.2016.03.009 , https://doi.org/10.1016/j.jbi.2016.03.009.","code":""},{"path":[]},{"path":"/reference/ipcw_weights.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use a Kaplan-Meier estimator to estimate IPCW weights — ipcw_weights","text":"","code":"data <- data.frame(   t = c(5, 8, 12, 15, 20),   delta = c(1, 0, 1, 0, 1) ) w <- ipcw_weights(data, tau = 10)"},{"path":"/reference/ipcw_xgboost.html","id":null,"dir":"Reference","previous_headings":"","what":"IPCW XGBoost Binary Classifier — ipcw_xgboost","title":"IPCW XGBoost Binary Classifier — ipcw_xgboost","text":"Fits binary classification model using XGBoost IPCW right-censored survival data. Hyperparameter tuning Jackknife model training performed.","code":""},{"path":"/reference/ipcw_xgboost.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"IPCW XGBoost Binary Classifier — ipcw_xgboost","text":"","code":"ipcw_xgboost(   data,   tau,   time_var = \"t\",   status_var = \"delta\",   verbose = 0,   grid = ipcw_xgboost_default_grid(),   nrounds = 100,   early_stopping_rounds = 10,   nfold = 3,   nthread = 1 )  ipcw_xgboost_default_grid()"},{"path":"/reference/ipcw_xgboost.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"IPCW XGBoost Binary Classifier — ipcw_xgboost","text":"data data frame containing survival data. Must include columns observed time event indicator. tau Numeric scalar. time horizon survival probability estimated. time_var Character. name variable data representing observed time event censoring. Default \"t\". status_var Character. name variable data representing event indicator (1 event occurred, 0 censored). Default \"delta\". verbose Integer. Verbosity level XGBoost training cross-validation (default 0). grid Data frame. Grid hyperparameters test cross-validation. default output ipcw_xgboost_default_grid(). nrounds Integer. Maximum number boosting rounds XGBoost training cross-validation (default 100). early_stopping_rounds Integer. Number rounds improvement trigger early stopping cross-validation (default 10). nfold Integer. Number folds cross-validation (default 3). nthread Integer. Number threads use XGBoost training (default 1).","code":""},{"path":"/reference/ipcw_xgboost.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"IPCW XGBoost Binary Classifier — ipcw_xgboost","text":"object class IPCWModel.","code":""},{"path":"/reference/ipcw_xgboost.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"IPCW XGBoost Binary Classifier — ipcw_xgboost","text":"Training performed using xgboost package (Chen Guestrin 2016) . weights calculated using ","code":""},{"path":"/reference/ipcw_xgboost.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"IPCW XGBoost Binary Classifier — ipcw_xgboost","text":"ipcw_xgboost_default_grid(): Returns default grid hyperparameters.","code":""},{"path":"/reference/ipcw_xgboost.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"IPCW XGBoost Binary Classifier — ipcw_xgboost","text":"Chen T, Guestrin C (2016). “XGBoost: Scalable Tree Boosting System.” Proceedings 22nd ACM SIGKDD International Conference Knowledge Discovery Data Mining,  KDD '16, 785–794. ISBN 978-1-4503-4232-2, doi:10.1145/2939672.2939785 , http://doi.acm.org/10.1145/2939672.2939785.","code":""},{"path":[]},{"path":"/reference/ipcw_xgboost.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"IPCW XGBoost Binary Classifier — ipcw_xgboost","text":"","code":"#' # veteran data example library(survival) tau <- 80 df <- veteran[, c(\"time\", \"status\", \"trt\")] newdata <- data.frame(trt = c(1, 2))  fit <- ipcw_xgboost(df,   tau = tau, time_var = \"time\",   status_var = \"status\" ) predict(fit, newdata) #>   prediction     lower     upper           se #> 1  0.4999998 0.4999986 0.5000009 5.848756e-07 #> 2  0.4999996 0.4999976 0.5000017 1.033711e-06"},{"path":"/reference/ipcwmodel.html","id":null,"dir":"Reference","previous_headings":"","what":"IPCW Model Class — ipcwmodel","title":"IPCW Model Class — ipcwmodel","text":"resulting object contains fitted model, jackknife resamples, prediction function, training Brier score, metadata model.","code":""},{"path":"/reference/ipcwmodel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"IPCW Model Class — ipcwmodel","text":"","code":"ipcwmodel(   model_name,   full_model,   jackknife_models,   tau,   predict,   train_brier,   time_var,   status_var,   training_vars,   w,   additional_information = list() )  # S3 method for class 'ipcwmodel' predict(object, newdata, naive = FALSE, z = 1.96, ...)"},{"path":"/reference/ipcwmodel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"IPCW Model Class — ipcwmodel","text":"model_name Character. name model. full_model fitted model object full dataset. jackknife_models List fitted models, omitting one observation (jackknife resamples). tau Numeric. time horizon survival estimated. predict Function. prediction function fitted model. train_brier Numeric. Brier score fitted model training data. time_var Character. name time variable data. status_var Character. name status variable data. training_vars Character vector. names covariates used model fitting. w Numeric vector. IPCW weights used model fitting. additional_information List. Additional information stored model object (default empty list). object object class ipcwmodel. newdata data frame containing covariates predictions made. naive Logical. TRUE, use naive jackknife variance estimator. FALSE, use IPCW-weighted estimator. z Numeric. z-score use confidence interval. Default 1.96, corresponding 95% confidence interval. ... Additional arguments (currently ignored).","code":""},{"path":"/reference/ipcwmodel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"IPCW Model Class — ipcwmodel","text":"object class ipcwmodel containing model details.","code":""},{"path":"/reference/ipcwmodel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"IPCW Model Class — ipcwmodel","text":"Constructs object class ipcwmodel. Models can used calling predict(model, newdata) method. returns data frame columns prediction, lower upper confidence intervals, standard error. confidence intervals standard errors can computed using either naive approach (using number jackknife models minus one denominator) robust approach (using IPCW weights). controlled naive argument predict method. confidence intervals computed using Wald approach (using z-score, default 1.96 95% CI).","code":""},{"path":"/reference/ipcwmodel.html","id":"methods-by-generic-","dir":"Reference","previous_headings":"","what":"Methods (by generic)","title":"IPCW Model Class — ipcwmodel","text":"predict(ipcwmodel): Predict method ipcwmodel objects.","code":""},{"path":"/reference/ipcwmodel.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"IPCW Model Class — ipcwmodel","text":"references Rd macro \\insertAllCites help page.","code":""},{"path":"/news/index.html","id":"ipcwjk-development-version","dir":"Changelog","previous_headings":"","what":"IPCWJK (development version)","title":"IPCWJK (development version)","text":"Initial package functionality","code":""}]
